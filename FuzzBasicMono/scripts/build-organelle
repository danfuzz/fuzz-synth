#!/bin/bash
#
# Builds the Organelle-specific version of this patch, writing out a `.zip` file
# of the result.

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Built output directory.
outDir=''

# Copy final output to desktop?
copyToDesktop=0

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --out=?*)
            outDir="${1#*=}"
            ;;
        --desktop)
            copyToDesktop=1
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Build the Organelle version of this patch.'
    echo ''
    echo '  --out=<path>'
    echo '    Path to File name for the built output (including temporary files). Defaults'
    echo '    to `out` under the project directory.'
    echo '  --desktop'
    echo '    Copy the final `.zip` output to `$HOME/Desktop`.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi


#
# Helper functions
#

# Edits the Organelle-specific `main.pd`, so that its `declare` points at the
# correct directory. As stored in the repo, it is correct for local development,
# not deployment to an Organelle.
function fix-organelle-main {
    mainFile="${filesDir}/main.pd"
    tmpFile="${mainFile}-new"

    sed -e 's#\.\./pure#.#g' < "${mainFile}" > "${tmpFile}" || return 1

    awk '
    BEGIN { skipCommand = 0; }

    /^#X text.*Note/ {
        # Omit this command.
        skipCommand = 1;
    }

    /declare -path/ {
        sub(/declare -path [^;]*/, "declare -path .");
    }

    skipCommand == 1 {
        if (match($0, /[^\\];$/) != 0) {
            skipCommand = 0;
        }
        next;
    }

    { print; }
    ' < "${mainFile}" > "${tmpFile}" || return 1

    mv "${tmpFile}" "${mainFile}" || return 1
}

# Calls `rsync` so as to do an all-local (not actually remote) "archive" copy
# (preserving permissions, modtimes, etc.).
#
# **Note:** We use `rsync` and not `cp` (even though this is a totally local
# operation) because it has more well-defined and sensible behavior for a
# variety of use cases (and e.g. specifically when copying a tree on top of
# another tree).
#
# **Note:** Trailing slashes on source directory names are significant to
# `rsync`.
function rsync-archive {
    # **Note:** We use checksum-based checking, because the default time-and-
    # size method is counterproductive. Specifically, a time-and-size check will
    # cause a failure to copy when two non-identical files happen to match in
    # both size and timestamp, which does happen in practice specifically when
    # running a build on a freshly checked-out source tree, wherein many many
    # files have the same timestamps, which means that only the sizes come into
    # play for the comparisons. And it's very easy to have a file size
    # coincidence.
    #
    # **Note:** An earlier version of this code used `--ignore-times` instead
    # of `--checksum`. The former worked equally well for this use case, except
    # because it would always write the target files (even if identical), it
    # would take significantly more time in the no-op case. (Specifically, some
    # virus checkers can seriously degrade write performance.)
    rsync --archive --checksum "$@"
}


#
# Main script
#

# By convention, the patch name is the name of the directory containing the
# patch.
patchName="$(cd "${baseDir}"; basename "$(pwd -P)")"

if [[ ${outDir} == '' ]]; then
    outDir="${baseDir}/out"
fi

if [[ ${outFile} == '' ]]; then
    outFile="${patchName}.zip"
fi

mkdir -p "${outDir}" || exit 1

filesDir="${outDir}/${patchName}"
zipFile="${outDir}/${patchName}.zip"

(rm -rf "${filesDir}" && mkdir "${filesDir}") || exit 1

# Use `rsync` instead of `cp` because its directory-handling semantics are
# actually more sensible.
rsync-archive "${baseDir}/pure/" "${filesDir}" || exit 1
rsync-archive "${baseDir}/organelle/" "${filesDir}" || exit 1
fix-organelle-main || exit 1

rm -f "${zipFile}" || exit 1

(cd "${outDir}"; zip -r "${zipFile}" "${patchName}") || exit 1

if (( ${copyToDesktop} )); then
    cp "${zipFile}" "${HOME}/Desktop"
fi
