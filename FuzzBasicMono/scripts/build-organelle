#!/bin/bash
#
# Builds the Organelle-specific version of this patch, writing out a `.zip` file
# of the result.

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Built output directory.
outDir=''

# Copy final output to desktop?
copyToDesktop=0

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --out=?*)
            outDir="${1#*=}"
            ;;
        --desktop)
            copyToDesktop=1
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Build the Organelle version of this patch.'
    echo ''
    echo '  --out=<path>'
    echo '    Path to File name for the built output (including temporary files). Defaults'
    echo '    to `out` under the project directory.'
    echo '  --desktop'
    echo '    Copy the final `.zip` output to `$HOME/Desktop`.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi


#
# Main script
#

# By convention, the patch name is the name of the directory containing the
# patch.
patchName="$(cd "${baseDir}"; basename "$(pwd -P)")"

if [[ ${outDir} == '' ]]; then
    outDir="${baseDir}/out"
fi

if [[ ${outFile} == '' ]]; then
    outFile="${patchName}.zip"
fi

mkdir -p "${outDir}" || exit 1

filesDir="${outDir}/${patchName}"
zipFile="${outDir}/${patchName}.zip"

(rm -rf "${filesDir}" && mkdir "${filesDir}") || exit 1

# Use `rsync` instead of `cp` because its directory-handling semantics are
# actually more sensible.
rsync --archive --checksum "${baseDir}/pure/" "${filesDir}"
rsync --archive --checksum "${baseDir}/organelle/" "${filesDir}"

rm -f "${zipFile}" || exit 1

(cd "${outDir}"; zip -r "${zipFile}" "${patchName}") || exit 1

if (( ${copyToDesktop} )); then
    cp "${zipFile}" "${HOME}/Desktop"
fi
