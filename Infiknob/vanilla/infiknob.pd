#N canvas 641 109 1387 1097 12;
#X text 896 10 Copyright 2019 Dan Bornstein <danfuzz@milk.com>. Licensed
AS IS and WITHOUT WARRANTY under the Apache License \, Version 2.0.
Details: <http://www.apache.org/licenses/LICENSE-2.0>, f 65;
#X obj 1166 180 float \$1;
#X obj 1147 234 float \$2;
#X obj 1127 289 float \$3;
#X obj 1127 314 value quant\$0;
#X obj 1147 259 value max\$0;
#X obj 1166 205 value min\$0;
#X obj 945 98 loadbang;
#X text 896 68 Contructor arguments / initial values;
#X obj 1077 740 value frozen\$0;
#X obj 316 247 inlet;
#X obj 990 620 receive \$0-reset;
#X obj 956 203 send \$0-reset;
#X obj 196 946 expr max(min($f1 \, max\$0) \, min\$0);
#X obj 196 1061 outlet;
#X obj 196 892 receive \$0-to-outlet;
#X obj 165 462 trigger bang bang;
#X obj 281 494 send \$0-reset;
#X text 448 920 Round to the quantization increment.;
#X text 447 947 Clip to the limits.;
#X obj 196 919 expr rint($f1 / quant\$0) * quant\$0;
#X obj 1059 798 value midincs\$0;
#X text 715 685 Auto-increment section;
#N canvas 188 596 922 726 auto-increment 0;
#X obj 61 564 +;
#X obj 10 69 inlet;
#X text 8 34 Toggle auto-increment (`0` to turn it off \, `1` to turn
it on)., f 32;
#X obj 398 69 inlet;
#X obj 10 175 select 0;
#X msg 10 214 stop;
#X msg 133 214 bang;
#X text 394 5 Amount of auto-increment. Float in range [-1..1] to indicate
how far from center the control is and in which direction. The further
away from center \, the faster the rate of change., f 49;
#X obj 61 648 outlet;
#X obj 333 648 outlet;
#X text 46 672 Value to send to the main outlet.;
#X text 318 673 New center value.;
#X obj 10 138 change;
#X text 109 106 Ensure boolean...;
#X obj 61 251 metro 50;
#X obj 10 105 expr $f1 != 0;
#X obj 366 364 float;
#X obj 61 290 trigger bang bang;
#X text 380 401 The first expression here calculates the new center
value. The second one emits the offset from center based on the current
direction of travel. These flow into an adder below \, to produce the
final value output.;
#X obj 61 401 expr max(min(center\$0 + $f2 \, max\$0) \, min\$0) \;
if($f2 < 0 \, -1 \, 1) * midincs\$0 / 2 * quant\$0;
#X obj 531 538 expr ((max\$0 - min\$0) / quant\$0) / 4;
#X obj 531 570 value auto_max\$0;
#X obj 133 251 send \$0-auto-reset;
#X obj 531 502 receive \$0-auto-reset;
#X text 528 594 Set the maximum rate of auto-increment (that is \,
the rate at the extremes of the input controls) \, such that it should
take about 4 seconds (`/ 4`) to sweep the output from one end of the
range to the other., f 51;
#X obj 398 166 expr $f1 / 20;
#X text 443 130 Increment per second \, set up as exponentially increasing
in magnitude as the control moves away from center., f 57;
#X text 442 191 Convert to increment per 50msec (1/20 sec) \, and hold
it in the `float` below for use during each bang of the `metro`.;
#X text 62 138 ...and only touch the `metro` when it changes \, to
avoid spurious extra `bang`s., f 41;
#X obj 398 109 expr copysign(quant\$0 * pow(auto_max\$0 \, abs($f1))
\, $f1), f 63;
#X connect 0 0 8 0;
#X connect 1 0 15 0;
#X connect 3 0 29 0;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X connect 5 0 14 0;
#X connect 6 0 14 0;
#X connect 6 0 22 0;
#X connect 12 0 4 0;
#X connect 14 0 17 0;
#X connect 15 0 12 0;
#X connect 16 0 19 1;
#X connect 17 0 19 0;
#X connect 17 1 16 0;
#X connect 19 0 0 0;
#X connect 19 0 9 0;
#X connect 19 1 0 1;
#X connect 20 0 21 0;
#X connect 23 0 20 0;
#X connect 25 0 16 1;
#X connect 29 0 25 0;
#X restore 674 782 pd auto-increment;
#X obj 674 846 send \$0-to-outlet;
#X obj 790 820 value center\$0;
#X obj 790 743 receive \$0-auto-amt;
#X text 13 8 "Infinite" range knob. See `README.md` for details.,
f 52;
#X obj 1083 680 value center\$0;
#X text 13 201 Constants: `midincs\$0` -- The number of increments
(steps) in the center range of the control input., f 82;
#N canvas 1475 350 1006 730 control-input 0;
#X obj 290 32 inlet;
#X text 339 31 Input control value;
#X obj 55 646 outlet;
#X obj 290 87 moses -0.5;
#X obj 424 148 moses 0.50001;
#X obj 345 449 expr center\$0 + ($f1 * quant\$0);
#X obj 345 352 trigger float bang;
#X obj 57 170 trigger bang float;
#X obj 692 213 trigger bang float;
#X obj 345 419 expr rint($f1 * midincs\$0);
#X obj 815 267 expr min(1 \, ($f1 - 0.5) * 2 + 0.01), f 20;
#X obj 180 225 expr max(-1 \, ($f1 + 0.5) * 2 - 0.01), f 22;
#X obj 318 646 outlet;
#X text 316 672 Toggle (boolean) for auto-increment;
#X text 618 670 Auto-increment amount;
#X obj 617 643 outlet;
#X obj 617 601 receive \$0-ctl-auto-amt;
#X obj 815 310 send \$0-ctl-auto-amt;
#X obj 180 268 send \$0-ctl-auto-amt;
#X msg 297 597 1;
#X msg 336 597 0;
#X obj 297 541 receive \$0-ctl-auto-on;
#X obj 336 568 receive \$0-ctl-auto-off;
#X text 52 672 Value to send to the main outlet;
#X obj 692 344 send \$0-ctl-auto-on;
#X obj 57 301 send \$0-ctl-auto-on;
#X obj 468 382 send \$0-ctl-auto-off;
#X text 12 99 Lower input range: auto-decrement.;
#X text 611 174 Upper input range: auto-increment.;
#X text 541 413 Convert control value to number of quanta up/down from
the center value., f 41;
#X text 396 232 Middle input range: quantized absolute control around
current center value., f 38;
#X connect 0 0 3 0;
#X connect 3 0 7 0;
#X connect 3 1 4 0;
#X connect 4 0 6 0;
#X connect 4 1 8 0;
#X connect 5 0 2 0;
#X connect 6 0 9 0;
#X connect 6 1 26 0;
#X connect 7 0 25 0;
#X connect 7 1 11 0;
#X connect 8 0 24 0;
#X connect 8 1 10 0;
#X connect 9 0 5 0;
#X connect 10 0 17 0;
#X connect 11 0 18 0;
#X connect 16 0 15 0;
#X connect 19 0 12 0;
#X connect 20 0 12 0;
#X connect 21 0 19 0;
#X connect 22 0 20 0;
#X restore 674 538 pd control-input;
#X obj 674 637 send \$0-to-outlet;
#X obj 728 608 send \$0-auto-toggle;
#X obj 674 711 receive \$0-auto-toggle;
#X obj 783 580 send \$0-auto-amt;
#N canvas 447 223 758 727 freeze-handler 0;
#X obj 28 140 inlet;
#X obj 300 137 inlet;
#X text 27 113 Input control value;
#X text 299 113 Boolean: currently frozen?;
#X obj 309 633 outlet;
#X obj 154 327 pack 0 0;
#X text 498 113 Value to output if still frozen;
#X obj 500 140 inlet;
#X text 307 658 New frozen flag;
#X obj 25 639 outlet;
#X obj 468 633 outlet;
#X obj 25 602 float;
#X msg 25 546 bang;
#X text 20 664 Input control to pass along if unfrozen, f 23;
#X msg 443 537 bang;
#X obj 468 597 float;
#X obj 114 454 select 0;
#X text 462 662 Value to send to main output if still frozen., f 32
;
#X text 13 9 This sub-object handles the work of keeping the control
"frozen" until the input passes into / near the center of the range
\, at which point it becomes unfrozen. This sub-object is "pure" (doesn't
use or store variables) \; instead its use site arranges for the appropriate
state update.;
#X obj 154 371 expr $f2 && (($f1 < -0.1) || ($f1 > 0.1));
#X obj 28 172 trigger float float;
#X obj 57 571 receive \$0-freeze-input;
#X obj 99 230 send \$0-freeze-input;
#X connect 0 0 20 0;
#X connect 1 0 5 1;
#X connect 5 0 19 0;
#X connect 7 0 15 1;
#X connect 11 0 9 0;
#X connect 12 0 11 0;
#X connect 14 0 15 0;
#X connect 15 0 10 0;
#X connect 16 0 12 0;
#X connect 16 1 14 0;
#X connect 19 0 4 0;
#X connect 19 0 16 0;
#X connect 20 0 5 0;
#X connect 20 1 22 0;
#X connect 21 0 11 1;
#X restore 674 445 pd freeze-handler;
#X obj 710 398 value frozen\$0;
#X obj 732 499 value frozen\$0;
#X obj 631 355 trigger float bang bang;
#X obj 828 398 value center\$0;
#X obj 790 476 send \$0-to-outlet;
#X msg 1036 827 0;
#X obj 1036 855 send \$0-auto-toggle;
#X msg 1077 713 1;
#X msg 1059 771 50;
#X obj 367 658 expr center\$0;
#X obj 367 690 send \$0-to-outlet;
#X obj 316 291 route bang reset set;
#X obj 14 885 receive \$0-reoutput;
#X msg 14 912 bang;
#X obj 47 369 send \$0-reoutput;
#X obj 924 250 expr center\$0;
#X obj 924 282 send \$0-to-outlet;
#X text 14 31 Constructor arguments (in order): `min\$0` -- minimum
value in the output range \; `max\$0` -- maximum value in the output
range \; `quant\$0` -- increment quantum (smallest possible increment
_and_ the quantized alignment) \; `init\$0` -- initial value and value
upon `reset`., f 82;
#X obj 1070 344 symbol \$4;
#X obj 1070 373 list fromsymbol;
#X obj 1070 402 list length;
#X obj 1070 429 select 0, f 16;
#X obj 945 141 trigger bang bang bang bang;
#X obj 1070 483 float \$4;
#X obj 1070 524 value init\$0;
#X obj 1179 463 expr (min\$0 + max\$0) / 2, f 13;
#X text 1183 346 Awful hack to determine if `\$4` was passed or should
be defaulted., f 24;
#X obj 1083 653 expr init\$0;
#X obj 407 438 trigger bang bang float;
#X obj 565 471 value init\$0;
#X obj 486 496 send \$0-reset;
#X text 13 109 Local variables: `center\$0` -- current center of the
control range \; `frozen\$0` -- boolean indicating whether the control
is "frozen" (starts frozen upon initialization and becomes unfrozen
once the input control is moved to near the center of its range) \;
`auto_max\$0` (used in the auto-increment sub-object) -- maximum rate
of value change per second when auto-incrementing., f 82;
#X msg 1070 456 bang;
#X obj 196 1032 change-plus;
#X obj 151 813 receive \$0-reset-output;
#X msg 151 840 set-none;
#X obj 1009 897 send \$0-reset-output;
#X obj 196 973 expr if($f1 == 0 \, 0 \, $f1);
#X text 447 975 Never output a negative zero.;
#X connect 1 0 6 0;
#X connect 2 0 5 0;
#X connect 3 0 4 0;
#X connect 7 0 58 0;
#X connect 10 0 47 0;
#X connect 11 0 41 0;
#X connect 11 0 43 0;
#X connect 11 0 44 0;
#X connect 11 0 63 0;
#X connect 11 0 72 0;
#X connect 13 0 73 0;
#X connect 15 0 20 0;
#X connect 16 0 45 0;
#X connect 16 1 17 0;
#X connect 20 0 13 0;
#X connect 23 0 24 0;
#X connect 23 1 25 0;
#X connect 26 0 23 1;
#X connect 30 0 31 0;
#X connect 30 1 32 0;
#X connect 30 2 34 0;
#X connect 33 0 23 0;
#X connect 35 0 30 0;
#X connect 35 1 37 0;
#X connect 35 2 40 0;
#X connect 36 0 35 1;
#X connect 38 0 35 0;
#X connect 38 1 36 0;
#X connect 38 2 39 0;
#X connect 39 0 35 2;
#X connect 41 0 42 0;
#X connect 43 0 9 0;
#X connect 44 0 21 0;
#X connect 45 0 46 0;
#X connect 47 0 50 0;
#X connect 47 1 16 0;
#X connect 47 2 64 0;
#X connect 47 3 38 0;
#X connect 48 0 49 0;
#X connect 49 0 69 0;
#X connect 51 0 52 0;
#X connect 54 0 55 0;
#X connect 55 0 56 0;
#X connect 56 0 57 0;
#X connect 57 0 68 0;
#X connect 57 1 61 0;
#X connect 58 0 51 0;
#X connect 58 1 12 0;
#X connect 58 2 54 0;
#X connect 58 3 1 0;
#X connect 58 3 2 0;
#X connect 58 3 3 0;
#X connect 59 0 60 0;
#X connect 61 0 60 0;
#X connect 63 0 28 0;
#X connect 64 0 45 0;
#X connect 64 1 66 0;
#X connect 64 2 65 0;
#X connect 68 0 59 0;
#X connect 69 0 14 0;
#X connect 70 0 71 0;
#X connect 71 0 69 0;
#X connect 73 0 69 0;
